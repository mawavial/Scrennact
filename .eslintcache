[{"/home/matt/Documents/scrennact/src/index.tsx":"1","/home/matt/Documents/scrennact/src/App.tsx":"2","/home/matt/Documents/scrennact/src/pages/main/main.tsx":"3","/home/matt/Documents/scrennact/src/components/searchKeyboard/searchKeyboard.tsx":"4","/home/matt/Documents/scrennact/src/components/movies/movies.tsx":"5","/home/matt/Documents/scrennact/src/components/menu/menu.tsx":"6"},{"size":199,"mtime":1610226950114,"results":"7","hashOfConfig":"8"},{"size":768,"mtime":1610247822548,"results":"9","hashOfConfig":"8"},{"size":3465,"mtime":1610342068153,"results":"10","hashOfConfig":"8"},{"size":25454,"mtime":1610350916848,"results":"11","hashOfConfig":"8"},{"size":296,"mtime":1610302015977,"results":"12","hashOfConfig":"8"},{"size":3845,"mtime":1610349710486,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"rtf6he",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"16"},"/home/matt/Documents/scrennact/src/index.tsx",[],["29","30"],"/home/matt/Documents/scrennact/src/App.tsx",[],"/home/matt/Documents/scrennact/src/pages/main/main.tsx",["31","32"],"import { useEffect, useRef, useState } from 'react';\nimport Movies from '../../components/movies/movies';\nimport SearchKeyboard from '../../components/searchKeyboard/searchKeyboard';\nimport Menu from '../../components/menu/menu';\n\n\ninterface IKeyChange {\n  value: number\n};\n\n\ninterface IMapper extends React.Props<any> {\n  value?: number,\n  focusedMenu?: boolean,\n  focusedMovies?: boolean,\n  focusedKeyboard?: boolean,\n};\n\nenum EWho {\n  menu,\n  keyboard,\n  movies\n}\n\n\nexport default function Main(props: IKeyChange): JSX.Element {\n\n\n  let mapper: IMapper = { value: props.value, focusedMenu: false, focusedMovies: false, focusedKeyboard: false };\n\n  let [isFocused, setFocus] = useState<IMapper>(mapper);\n  const menuFocus: any | null = useRef(null);\n  const keyboardFocus: any | null = useRef(null);\n  const moviesFocus: any | null = useRef(null);\n\n  let whoIsHandler = (value: EWho): void => {\n    switch (value) {\n      case EWho.keyboard:\n        setFocus({ ...isFocused, focusedKeyboard: true, focusedMenu: false, focusedMovies: false })\n        keyboardFocus?.current.focus();\n        break;\n      case EWho.menu:\n        setFocus({ ...isFocused, focusedMenu: true, focusedKeyboard:false, focusedMovies:false })\n        menuFocus?.current.focus();\n        break;\n      case EWho.movies:\n        setFocus({ ...isFocused, focusedMovies: true, focusedKeyboard: false, focusedMenu: false })\n        moviesFocus?.current.focus();\n        break;\n      default:\n        setFocus({ ...isFocused, focusedMenu: true, focusedKeyboard: false, focusedMovies:  false })\n        menuFocus?.current.focus();\n        break;\n    }\n  };\n\n\n  let focus = (): void => {\n    setFocus({ ...isFocused, focusedMenu: true, focusedKeyboard: false, focusedMovies:  false })\n    menuFocus?.current.focus();\n  };\n\n  useEffect(() => {\n    setFocus({ ...isFocused, value: props.value })\n    return () => {\n      setFocus({ ...isFocused, value: props.value })\n    }\n  }, [props.value]);\n\n  useEffect(() => {\n    focus();\n    return () => {\n      focus();\n    }\n  }, []);\n\n  return (\n    <>\n      <table style={{ width: '100%', height: '100%' }}>\n        <tbody>\n          <tr>\n            <td style={{\n              flexGrow: 1,\n              width: '10%',\n              height: '100%',\n              border: '2px solid',\n              borderRightColor: 'white',\n              backgroundColor: 'aliceblue',\n            }}\n              tabIndex={1}\n              onFocus={(e): void => setFocus({ ...isFocused, focusedMenu: true })}\n              ref={menuFocus}\n            >\n              <Menu value={isFocused} onChange={whoIsHandler} />\n            </td>\n            <td style={{\n              width: '35%',\n              height: '100%',\n              border: '2px solid',\n              borderRightColor: 'white',\n\n            }}\n              tabIndex={2}\n              onFocus={(e): void => setFocus({ ...isFocused, focusedKeyboard: true })}\n              ref={keyboardFocus}\n            >\n              <SearchKeyboard value={isFocused} onChange={whoIsHandler} />\n            </td>\n            <td style={{\n              width: '45%',\n              height: '100%'\n            }}\n              tabIndex={3}\n              onFocus={(e): void => setFocus({ ...isFocused, focusedMovies: true })}\n              ref={moviesFocus}\n            >\n              <Movies value={isFocused} onChange={whoIsHandler} />\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </>\n  );\n}\n","/home/matt/Documents/scrennact/src/components/searchKeyboard/searchKeyboard.tsx",["33","34","35"],"/home/matt/Documents/scrennact/src/components/movies/movies.tsx",[],"/home/matt/Documents/scrennact/src/components/menu/menu.tsx",["36"],"import { useEffect, useRef, useState } from \"react\";\ninterface IMapper {\n  value?: number,\n  focusedMenu?: boolean,\n  focusedMovies?: boolean,\n  focusedKeyboard?: boolean\n};\n\nenum EOptions {\n  search,\n  home,\n  now,\n  categories,\n  account\n};\n\nenum EWho {\n  menu,\n  keyboard,\n  movies\n};\n\n\n\nexport default function Menu(props: any) {\n\n  let [pointer, setPointer] = useState<EOptions>(0);\n  let mapper: IMapper = { ...props.value };\n  let [isFocused, setFocus] = useState<IMapper>(mapper);\n  const searchFocus: any | null = useRef(null);\n  const homeFocus: any | null = useRef(null);\n  const nowFocus: any | null = useRef(null);\n  const categoriesFocus: any | null = useRef(null);\n  const accountFocus: any | null = useRef(null);\n\n  let manager = (value: EOptions): void => { \n    console.log('%c%s', 'color: #102718', value);\n    switch (value) {\n      case EOptions.search:\n        resetAll();\n        searchFocus.current.style.backgroundColor = 'blue';\n        break;\n      case EOptions.home:\n        resetAll();\n        homeFocus.current.style.backgroundColor = 'blue';\n        break;\n      case EOptions.now:\n        resetAll();\n        nowFocus.current.style.backgroundColor = 'blue';\n        break;\n      case EOptions.categories:\n        resetAll();\n        categoriesFocus.current.style.backgroundColor = 'blue';\n        break;\n      case EOptions.account:\n        resetAll();\n        accountFocus.current.style.backgroundColor = 'blue';\n        break;\n      default:\n        resetAll();\n        accountFocus.current.style.backgroundColor = 'blue';\n        break;\n    }\n  }\n\n  let resetAll = () : void => { \n    searchFocus.current.style.backgroundColor = 'white';\n    homeFocus.current.style.backgroundColor = 'white';\n    nowFocus.current.style.backgroundColor = 'white';\n    categoriesFocus.current.style.backgroundColor = 'white';\n    accountFocus.current.style.backgroundColor = 'white';\n    accountFocus.current.style.backgroundColor = 'white';\n  }\n\n  let goUp = () : void => { \n    if(pointer === -1){\n      setPointer(EOptions.search);\n      manager(pointer);\n    }\n    else if(pointer === EOptions.search){\n      setPointer(EOptions.account);\n      manager(pointer);\n    }\n    else{ \n      let point = pointer - 1;\n      setPointer(point);\n      manager(pointer);\n    }\n    \n  }\n\n  let goDown = () : void => { \n    if(pointer === -1){\n      setPointer(EOptions.search);\n      manager(pointer);\n    }\n    else if(pointer === EOptions.account){\n      setPointer(EOptions.search);\n      manager(pointer);\n    }\n    else{ \n      let point = pointer + 1;\n      setPointer(point);\n      manager(pointer);\n    }\n    \n  }\n\n  useEffect(() => {\n    setFocus({...props.value})\n    return () => {\n      setFocus({...props.value})\n    }\n  }, [props]);\n\n\n  useEffect(() => {\n    if (isFocused.focusedMenu === true) {\n      if (isFocused.value === 40) {\n        goDown();\n      }\n      else if (isFocused.value === 38) {\n        goUp();\n      }\n      else if (isFocused.value === 39) {\n        manager(EOptions.search);\n        resetAll();\n        props.onChange(EWho.keyboard);\n      }\n    }\n  }, [isFocused])\n\n  return (\n    <>\n      <div style={{ width: '100%', height: '25%', }} />\n      <div style={{ width: '100%', height: '55%' }}>\n        <div style={{ width: '100%', height: '100%' }}>\n          <div ref={searchFocus} style={{width: '100%', height: '25%' }}>Busca</div>\n          <div ref={homeFocus} style={{ width: '100%', height: '25%' }}>In√≠cio</div>\n          <div ref={nowFocus} style={{ width: '100%', height: '25%' }}>Agora na TV</div>\n          <div ref={categoriesFocus} style={{ width: '100%', height: '25%' }}>Categorias</div>\n          <div ref={accountFocus} style={{ width: '100%', height: '25%' }}>Minha Conta</div>\n        </div>\n      </div>\n      <div style={{ width: '100%', height: '20%', }} />\n    </>\n  );\n}\n",{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":68,"column":6,"nodeType":"43","endLine":68,"endColumn":19,"suggestions":"44"},{"ruleId":"41","severity":1,"message":"45","line":75,"column":6,"nodeType":"43","endLine":75,"endColumn":8,"suggestions":"46"},{"ruleId":"47","severity":1,"message":"48","line":26,"column":17,"nodeType":"49","messageId":"50","endLine":26,"endColumn":25},{"ruleId":"41","severity":1,"message":"51","line":206,"column":8,"nodeType":"43","endLine":206,"endColumn":19,"suggestions":"52"},{"ruleId":"47","severity":1,"message":"53","line":210,"column":9,"nodeType":"49","messageId":"50","endLine":210,"endColumn":16},{"ruleId":"41","severity":1,"message":"54","line":131,"column":6,"nodeType":"43","endLine":131,"endColumn":17,"suggestions":"55"},"no-native-reassign",["56"],"no-negated-in-lhs",["57"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'isFocused'. Either include it or remove the dependency array. You can also do a functional update 'setFocus(i => ...)' if you only need 'isFocused' in the 'setFocus' call.","ArrayExpression",["58"],"React Hook useEffect has a missing dependency: 'focus'. Either include it or remove the dependency array.",["59"],"@typescript-eslint/no-unused-vars","'setInput' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'position' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["60"],"'manager' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'goDown', 'goUp', 'manager', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["61"],"no-global-assign","no-unsafe-negation",{"desc":"62","fix":"63"},{"desc":"64","fix":"65"},{"desc":"66","fix":"67"},{"desc":"68","fix":"69"},"Update the dependencies array to be: [isFocused, props.value]",{"range":"70","text":"71"},"Update the dependencies array to be: [focus]",{"range":"72","text":"73"},"Update the dependencies array to be: [isFocused, position, props]",{"range":"74","text":"75"},"Update the dependencies array to be: [goDown, goUp, isFocused, manager, props]",{"range":"76","text":"77"},[1944,1957],"[isFocused, props.value]",[2039,2041],"[focus]",[8256,8267],"[isFocused, position, props]",[3101,3112],"[goDown, goUp, isFocused, manager, props]"]